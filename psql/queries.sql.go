// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package psql

import (
	"context"
	"time"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
  description, user_id, created_at, scheduled_for
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, user_id, description, scheduled_for, created_at
`

type CreateEventParams struct {
	Description  string
	UserID       int64
	CreatedAt    time.Time
	ScheduledFor time.Time
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent,
		arg.Description,
		arg.UserID,
		arg.CreatedAt,
		arg.ScheduledFor,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.ScheduledFor,
		&i.CreatedAt,
	)
	return i, err
}

const createNote = `-- name: CreateNote :one
INSERT INTO notes (
  description, user_id, created_at
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, description, created_at
`

type CreateNoteParams struct {
	Description string
	UserID      int64
	CreatedAt   time.Time
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, createNote, arg.Description, arg.UserID, arg.CreatedAt)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
  done, description, user_id, created_at
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, done, description, user_id, created_at
`

type CreateTaskParams struct {
	Done        bool
	Description string
	UserID      int64
	CreatedAt   time.Time
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.Done,
		arg.Description,
		arg.UserID,
		arg.CreatedAt,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Done,
		&i.Description,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id, username, fullname
) VALUES (
  $1, $2, $3
)
RETURNING id, username, fullname
`

type CreateUserParams struct {
	ID       int64
	Username string
	Fullname string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.Username, arg.Fullname)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Fullname)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, fullname FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Fullname)
	return i, err
}

const listEvents = `-- name: ListEvents :many
SELECT id, user_id, description, scheduled_for, created_at FROM events
WHERE user_id = $1 and created_at::date = $2::date
`

type ListEventsParams struct {
	UserID  int64
	Column2 time.Time
}

func (q *Queries) ListEvents(ctx context.Context, arg ListEventsParams) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEvents, arg.UserID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Description,
			&i.ScheduledFor,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNotes = `-- name: ListNotes :many
SELECT id, user_id, description, created_at FROM notes
WHERE user_id = $1 and created_at::date = $2::date
`

type ListNotesParams struct {
	UserID  int64
	Column2 time.Time
}

func (q *Queries) ListNotes(ctx context.Context, arg ListNotesParams) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, listNotes, arg.UserID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasks = `-- name: ListTasks :many
SELECT id, done, description, user_id, created_at FROM tasks
WHERE user_id = $1 and created_at::date = $2::date
`

type ListTasksParams struct {
	UserID  int64
	Column2 time.Time
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks, arg.UserID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Done,
			&i.Description,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks set done = $1 where user_id = $2 and id = $3
RETURNING id, done, description, user_id, created_at
`

type UpdateTaskParams struct {
	Done   bool
	UserID int64
	ID     int64
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask, arg.Done, arg.UserID, arg.ID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Done,
		&i.Description,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}
